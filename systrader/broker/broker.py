from abc import ABC, abstractmethod


class Broker(ABC):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a Strategy and
    the ultimate set of Fill objects that actually occur in the
    market.

    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows
    strategies to be backtested in a very similar manner to the
    live trading engine.
    """

    @abstractmethod
    def execute_order(self, event):
        """
        Execute an order event, producing a Fill event
        that gets placed onto the Events queue.

        Parameters
        ----------
        event
            Contains an Event object with order information.
        """
        raise NotImplementedError("Should implement execute_order()")

    @abstractmethod
    def get_positions(self):
        """
        Retrieve the current positions (holdings)
        in the brokerage account.
        """
        raise NotImplementedError("Should implement get_positions()")
